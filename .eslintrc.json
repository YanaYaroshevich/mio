{
	"root": true,
	"ignorePatterns": ["projects/**/*"],
	"overrides": [
		{
			"files": ["*.ts"],
			"parserOptions": {
				"project": ["tsconfig.json", "e2e/tsconfig.json"],
				"createDefaultProgram": true
			},
			"extends": [
				"eslint:recommended",
				"plugin:@typescript-eslint/recommended",
				"plugin:@typescript-eslint/recommended-requiring-type-checking",
				"plugin:@angular-eslint/recommended",
				"plugin:@angular-eslint/template/process-inline-templates",
				"prettier/@typescript-eslint",
				"plugin:prettier/recommended"
			],
			"rules": {
				"comma-dangle": [
					"error",
					{
						"arrays": "always-multiline",
						"objects": "always-multiline",
						"imports": "always-multiline",
						"exports": "always-multiline",
						"functions": "never"
					}
				],
				"max-len": [
					"error",
					{
						"ignorePattern": "^import [^,]+ from |^export | implements ",
						"code": 120
					}
				],
				"@angular-eslint/component-selector": [
					"error",
					{
						"type": "element",
						"prefix": ["FILL_ME"],
						"style": "kebab-case"
					}
				],
				"@angular-eslint/directive-selector": [
					"error",
					{
						"type": "attribute",
						"prefix": ["FILL_ME"],
						"style": "camelCase"
					}
				],
				"@angular-eslint/component-class-suffix": [
					"error",
					{
						"suffixes": ["Component", "Container"]
					}
				],
				"@typescript-eslint/explicit-member-accessibility": [
					"warn",
					{
						"accessibility": "explicit",
						"overrides": {
							"methods": "explicit",
							"properties": "no-public"
						}
					}
				],
				"@angular-eslint/use-lifecycle-interface": "error",
				"@typescript-eslint/array-type": [
					"error",
					{
						"default": "array"
					}
				],
				"@typescript-eslint/consistent-type-assertions": [
					"error",
					{
						"assertionStyle": "as",
						"objectLiteralTypeAssertions": "allow-as-parameter"
					}
				],
				"@typescript-eslint/dot-notation": "error",
				"@typescript-eslint/indent": "off",
				"@typescript-eslint/no-unsafe-assignment": "off",
				"@typescript-eslint/member-delimiter-style": ["error"],
				"@typescript-eslint/member-ordering": [
					"error",
					{
						"default": [
							"signature",
							"decorated-field",
							"field",
							"constructor",
							"decorated-method",
							"static-method",
							"instance-method",
							"abstract-method",
							"method"
						]
					}
				],
				/*"@typescript-eslint/naming-convention": [
					"error",
					{
						"selector": "classProperty",
						"format": ["camelCase"]
					},
					{
						"selector": ["classProperty"],
						"format": ["camelCase"]
					},
					{
						"selector": "classProperty",
						"modifiers": ["static"],
						"format": ["UPPER_CASE"]
					},
					{
						"selector": "classProperty",
						"modifiers": ["readonly"],
						"format": ["UPPER_CASE", "PascalCase", "camelCase"]
					},
					{
						"selector": "classProperty",
						"modifiers": ["readonly"],
						"format": ["UPPER_CASE", "PascalCase"]
					},
					{
						"selector": "variable",
						"format": ["UPPER_CASE", "camelCase", "PascalCase"]
					},
					{
						"selector": ["enum", "interface", "class", "enumMember", "typeAlias"],
						"format": ["PascalCase"]
					},
					{
						"selector": ["enumMember"],
						"format": ["camelCase"]
					}
				],*/
				"@typescript-eslint/no-namespace": "off",
				"@typescript-eslint/no-non-null-assertion": "error",
				"@typescript-eslint/no-parameter-properties": "off",
				"@typescript-eslint/no-shadow": "error",
				"@typescript-eslint/no-unused-expressions": "error",
				"@typescript-eslint/no-use-before-define": "error",
				"@typescript-eslint/no-floating-promises": "warn",
				"@typescript-eslint/prefer-function-type": "error",
				"no-case-declarations": "off",
				"@typescript-eslint/unbound-method": [
					"error",
					{
						"ignoreStatic": true
					}
				],
				"@typescript-eslint/no-unsafe-call": "off",
				"@typescript-eslint/quotes": [
					"error",
					"single",
					{
						"avoidEscape": true
					}
				],
				"@typescript-eslint/semi": ["error", "always"],
				"@typescript-eslint/triple-slash-reference": [
					"error",
					{
						"path": "always",
						"types": "prefer-import",
						"lib": "always"
					}
				],
				"arrow-body-style": ["error", "as-needed"],
				"no-console": [
					"error",
					{
						"allow": ["warn", "error"]
					}
				],
				"prettier/prettier": [
					"error",
					{
						"usePrettierrc": true
					}
				]
			}
		},
		// NOTE: WE ARE NOT APPLYING PRETTIER IN THIS OVERRIDE, ONLY @ANGULAR-ESLINT/TEMPLATE
		{
			"files": ["*.html"],
			"extends": ["plugin:@angular-eslint/template/recommended"],
			"rules": {}
		},
		// NOTE: WE ARE NOT APPLYING @ANGULAR-ESLINT/TEMPLATE IN THIS OVERRIDE, ONLY PRETTIER
		{
			"files": ["*.html"],
			"excludedFiles": ["*inline-template-*.component.html"],
			"extends": ["plugin:prettier/recommended"],
			"rules": {
				// NOTE: WE ARE OVERRIDING THE DEFAULT CONFIG TO ALWAYS SET THE PARSER TO ANGULAR (SEE BELOW)
				"prettier/prettier": [
					"error",
					{
						"parser": "angular"
					}
				]
			}
		}
	]
}
